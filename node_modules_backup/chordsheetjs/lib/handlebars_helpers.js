"use strict";

var _handlebars = _interopRequireDefault(require("handlebars"));

var _chord_lyrics_pair = _interopRequireDefault(require("./chord_sheet/chord_lyrics_pair"));

var _tag = _interopRequireDefault(require("./chord_sheet/tag"));

var _constants = require("./constants");

var _utilities = require("./utilities");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var lineHasContents = function lineHasContents(line) {
  return line.items.some(function (item) {
    return item.isRenderable();
  });
};

_handlebars["default"].registerHelper('isChordLyricsPair', function (item) {
  return item instanceof _chord_lyrics_pair["default"];
});

_handlebars["default"].registerHelper('isTag', function (item) {
  return item instanceof _tag["default"];
});

_handlebars["default"].registerHelper('isComment', function (item) {
  return item.name === 'comment';
});

_handlebars["default"].registerHelper('shouldRenderLine', function (line, options) {
  if (options.data.root.renderBlankLines) {
    return true;
  }

  return lineHasContents(line);
});

_handlebars["default"].registerHelper('hasChordContents', _utilities.hasChordContents);

_handlebars["default"].registerHelper('hasTextContents', _utilities.hasTextContents);

_handlebars["default"].registerHelper('lineHasContents', lineHasContents);

_handlebars["default"].registerHelper('lineClasses', function (line) {
  var classes = ['row'];

  if (!lineHasContents(line)) {
    classes.push('empty-line');
  }

  return classes.join(' ');
});

_handlebars["default"].registerHelper('toUpperCase', function (line) {
  return line.toUpperCase();
});

_handlebars["default"].registerHelper('paragraphClasses', function (paragraph) {
  var classes = ['paragraph'];

  if (paragraph.type !== _constants.INDETERMINATE && paragraph.type !== _constants.NONE) {
    classes.push(paragraph.type);
  }

  return classes.join(' ');
});

_handlebars["default"].registerHelper('isEvaluatable', _utilities.isEvaluatable);

_handlebars["default"].registerHelper('evaluate', function (item, metadata) {
  if (!metadata) {
    throw new Error('cannot evaluate, metadata is null');
  }

  return item.evaluate(metadata);
});