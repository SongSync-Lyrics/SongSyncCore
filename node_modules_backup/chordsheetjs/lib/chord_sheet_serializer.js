"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _literal = _interopRequireDefault(require("./chord_sheet/chord_pro/literal"));

var _song = _interopRequireDefault(require("./chord_sheet/song"));

var _chord_lyrics_pair = _interopRequireDefault(require("./chord_sheet/chord_lyrics_pair"));

var _tag = _interopRequireDefault(require("./chord_sheet/tag"));

var _comment = _interopRequireDefault(require("./chord_sheet/comment"));

var _ternary = _interopRequireDefault(require("./chord_sheet/chord_pro/ternary"));

var _utilities = require("./utilities");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CHORD_SHEET = 'chordSheet';
var CHORD_LYRICS_PAIR = 'chordLyricsPair';
var TAG = 'tag';
var COMMENT = 'comment';
var TERNARY = 'ternary';
var LINE = 'line';
/**
 * Serializes a song into een plain object, and deserializes the serialized object back into a {@link Song}
 */

var ChordSheetSerializer = /*#__PURE__*/function () {
  function ChordSheetSerializer() {
    _classCallCheck(this, ChordSheetSerializer);
  }

  _createClass(ChordSheetSerializer, [{
    key: "serialize",
    value:
    /**
     * Serializes the chord sheet to a plain object, which can be converted to any format like JSON, XML etc
     * Can be deserialized using {@link deserialize}
     * @returns object A plain JS object containing all chord sheet data
     */
    function serialize(song) {
      var _this = this;

      return {
        type: CHORD_SHEET,
        lines: song.lines.map(function (line) {
          return _this.serializeLine(line);
        })
      };
    }
  }, {
    key: "serializeLine",
    value: function serializeLine(line) {
      var _this2 = this;

      return {
        type: LINE,
        items: line.items.map(function (item) {
          return _this2.serializeItem(item);
        })
      };
    }
  }, {
    key: "serializeItem",
    value: function serializeItem(item) {
      if (item instanceof _tag["default"]) {
        return this.serializeTag(item);
      }

      if (item instanceof _chord_lyrics_pair["default"]) {
        return this.serializeChordLyricsPair(item);
      }

      if (item instanceof _ternary["default"]) {
        return this.serializeTernary(item);
      }

      if (item instanceof _literal["default"]) {
        return this.serializeLiteral(item);
      }

      throw new Error("Don't know how to serialize ".concat(item.constructor.name));
    }
  }, {
    key: "serializeTag",
    value: function serializeTag(tag) {
      return {
        type: TAG,
        name: tag.originalName,
        value: tag.value
      };
    }
  }, {
    key: "serializeChordLyricsPair",
    value: function serializeChordLyricsPair(chordLyricsPair) {
      return {
        type: CHORD_LYRICS_PAIR,
        chords: chordLyricsPair.chords,
        lyrics: chordLyricsPair.lyrics
      };
    }
  }, {
    key: "serializeTernary",
    value: function serializeTernary(ternary) {
      return {
        type: TERNARY,
        variable: ternary.variable,
        valueTest: ternary.valueTest,
        trueExpression: this.serializeExpression(ternary.trueExpression),
        falseExpression: this.serializeExpression(ternary.falseExpression)
      };
    }
  }, {
    key: "serializeLiteral",
    value: function serializeLiteral(literal) {
      return literal.string;
    }
  }, {
    key: "serializeExpression",
    value: function serializeExpression(expression) {
      var _this3 = this;

      return expression === null || expression === void 0 ? void 0 : expression.map(function (part) {
        return _this3.serializeItem(part);
      });
    }
    /**
     * Deserializes a song that has been serialized using {@link serialize}
     * @param {object} serializedSong The serialized song
     * @returns {Song} The deserialized song
     */

  }, {
    key: "deserialize",
    value: function deserialize(serializedSong) {
      this.parseAstComponent(serializedSong);
      this.song.finish();
      return this.song;
    }
  }, {
    key: "parseAstComponent",
    value: function parseAstComponent(astComponent) {
      if (!astComponent) {
        return null;
      }

      if (typeof astComponent === 'string') {
        return new _literal["default"](astComponent);
      }

      var type = astComponent.type;

      switch (type) {
        case CHORD_SHEET:
          return this.parseChordSheet(astComponent);

        case CHORD_LYRICS_PAIR:
          return this.parseChordLyricsPair(astComponent);

        case TAG:
          return this.parseTag(astComponent);

        case COMMENT:
          return this.parseComment(astComponent);

        case TERNARY:
          return this.parseTernary(astComponent);

        default:
          console.warn("Unhandled AST component \"".concat(type, "\""), astComponent);
      }

      return null;
    }
  }, {
    key: "parseChordSheet",
    value: function parseChordSheet(astComponent) {
      var _this4 = this;

      var lines = astComponent.lines;
      this.song = new _song["default"]();
      lines.forEach(function (line, index) {
        return _this4.parseLine(line, index);
      });
    }
  }, {
    key: "parseLine",
    value: function parseLine(astComponent) {
      var _this5 = this;

      var items = astComponent.items;
      this.song.addLine();
      items.forEach(function (item) {
        var parsedItem = _this5.parseAstComponent(item);

        _this5.song.addItem(parsedItem);
      });
    }
  }, {
    key: "parseChordLyricsPair",
    value: function parseChordLyricsPair(astComponent) {
      var chords = astComponent.chords,
          lyrics = astComponent.lyrics;
      return new _chord_lyrics_pair["default"](chords, lyrics);
    }
  }, {
    key: "parseTag",
    value: function parseTag(astComponent) {
      var name = astComponent.name,
          value = astComponent.value,
          _astComponent$locatio = astComponent.location;
      _astComponent$locatio = _astComponent$locatio === void 0 ? {} : _astComponent$locatio;
      var offset = _astComponent$locatio.offset,
          line = _astComponent$locatio.line,
          column = _astComponent$locatio.column;
      return new _tag["default"](name, value, {
        line: line,
        column: column,
        offset: offset
      });
    }
  }, {
    key: "parseComment",
    value: function parseComment(astComponent) {
      var comment = astComponent.comment;
      return new _comment["default"](comment);
    }
  }, {
    key: "parseTernary",
    value: function parseTernary(astComponent) {
      var variable = astComponent.variable,
          valueTest = astComponent.valueTest,
          trueExpression = astComponent.trueExpression,
          falseExpression = astComponent.falseExpression,
          _astComponent$locatio2 = astComponent.location;
      _astComponent$locatio2 = _astComponent$locatio2 === void 0 ? {} : _astComponent$locatio2;
      var offset = _astComponent$locatio2.offset,
          line = _astComponent$locatio2.line,
          column = _astComponent$locatio2.column;
      return new _ternary["default"]({
        variable: variable,
        valueTest: valueTest,
        trueExpression: this.parseExpression(trueExpression),
        falseExpression: this.parseExpression(falseExpression),
        offset: offset,
        line: line,
        column: column
      });
    }
  }, {
    key: "parseExpression",
    value: function parseExpression(expression) {
      var _this6 = this;

      var parsedParts = (expression || []).map(function (part) {
        return _this6.parseAstComponent(part);
      });
      return (0, _utilities.presence)(parsedParts);
    }
  }]);

  return ChordSheetSerializer;
}();

var _default = ChordSheetSerializer;
exports["default"] = _default;