"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pushNew = exports.presence = exports.padLeft = exports.isPresent = exports.isEvaluatable = exports.hasTextContents = exports.hasChordContents = exports.deprecate = void 0;
exports.scopeCss = scopeCss;

var _chord_lyrics_pair = _interopRequireDefault(require("./chord_sheet/chord_lyrics_pair"));

var _tag = _interopRequireDefault(require("./chord_sheet/tag"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var pushNew = function pushNew(collection, Klass) {
  var newObject = new Klass();
  collection.push(newObject);
  return newObject;
};

exports.pushNew = pushNew;

var hasChordContents = function hasChordContents(line) {
  return line.items.some(function (item) {
    return item instanceof _chord_lyrics_pair["default"] && item.chords;
  });
};

exports.hasChordContents = hasChordContents;

var isEvaluatable = function isEvaluatable(item) {
  return typeof item.evaluate === 'function';
};

exports.isEvaluatable = isEvaluatable;

var hasTextContents = function hasTextContents(line) {
  return line.items.some(function (item) {
    return item instanceof _chord_lyrics_pair["default"] && item.lyrics || item instanceof _tag["default"] && item.isRenderable() || isEvaluatable(item);
  });
};

exports.hasTextContents = hasTextContents;

var padLeft = function padLeft(str, length) {
  var paddedString = str;

  for (var l = str.length; l < length; l += 1, paddedString += ' ') {
    ;
  }

  return paddedString;
};

exports.padLeft = padLeft;

var deprecate = function deprecate(message) {
  if (process && process.emitWarning) {
    process.emitWarning(message);
  }
};

exports.deprecate = deprecate;

var isPresent = function isPresent(object) {
  return object && object.length > 0;
};

exports.isPresent = isPresent;

var presence = function presence(object) {
  return isPresent(object) ? object : null;
};

exports.presence = presence;

function dasherize(string) {
  return string.replace(/[A-Z]/g, function (match) {
    return "-".concat(match.toLowerCase());
  });
}

function scopeCss(css, scope) {
  return Object.entries(css).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        selector = _ref2[0],
        styles = _ref2[1];

    var rules = Object.entries(styles).map(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          property = _ref4[0],
          value = _ref4[1];

      return "".concat(dasherize(property), ": ").concat(value, ";");
    }).join('\n  ');
    var scopedSelector = "".concat(scope, " ").concat(selector).trim();
    return "\n".concat(scopedSelector, " {\n  ").concat(rules, "\n}").substring(1);
  }).join('\n\n');
}