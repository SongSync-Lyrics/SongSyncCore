"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("../constants");

var _tag = _interopRequireWildcard(require("../chord_sheet/tag"));

var _chord_sheet_parser = _interopRequireDefault(require("./chord_sheet_parser"));

var _startSectionTags, _endSectionTags;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var VERSE_LINE_REGEX = /^\[Verse.*]/;
var CHORUS_LINE_REGEX = /^\[Chorus]/;
var OTHER_METADATA_LINE_REGEX = /^\[([^\]]+)]/;
var startSectionTags = (_startSectionTags = {}, _defineProperty(_startSectionTags, _constants.VERSE, _tag.START_OF_VERSE), _defineProperty(_startSectionTags, _constants.CHORUS, _tag.START_OF_CHORUS), _startSectionTags);
var endSectionTags = (_endSectionTags = {}, _defineProperty(_endSectionTags, _constants.VERSE, _tag.END_OF_VERSE), _defineProperty(_endSectionTags, _constants.CHORUS, _tag.END_OF_CHORUS), _endSectionTags);
/**
 * Parses an Ultimate Guitar chord sheet with metadata
 * Inherits from {@link ChordSheetParser}
 */

var UltimateGuitarParser = /*#__PURE__*/function (_ChordSheetParser) {
  _inherits(UltimateGuitarParser, _ChordSheetParser);

  var _super = _createSuper(UltimateGuitarParser);

  function UltimateGuitarParser() {
    _classCallCheck(this, UltimateGuitarParser);

    return _super.apply(this, arguments);
  }

  _createClass(UltimateGuitarParser, [{
    key: "parseLine",
    value: function parseLine(line) {
      if (this.isSectionEnd()) {
        this.endSection();
      }

      if (VERSE_LINE_REGEX.test(line)) {
        this.startNewLine();
        this.startSection(_constants.VERSE);
      } else if (CHORUS_LINE_REGEX.test(line)) {
        this.startNewLine();
        this.startSection(_constants.CHORUS);
      } else if (OTHER_METADATA_LINE_REGEX.test(line)) {
        this.startNewLine();
        this.endSection();
        var comment = line.match(OTHER_METADATA_LINE_REGEX)[1];
        this.songLine.addTag(new _tag["default"](_tag.COMMENT, comment));
      } else {
        _get(_getPrototypeOf(UltimateGuitarParser.prototype), "parseLine", this).call(this, line);
      }
    }
  }, {
    key: "isSectionEnd",
    value: function isSectionEnd() {
      return this.songLine && this.songLine.isEmpty() && this.song.previousLine && !this.song.previousLine.isEmpty();
    }
  }, {
    key: "endOfSong",
    value: function endOfSong() {
      _get(_getPrototypeOf(UltimateGuitarParser.prototype), "endOfSong", this).call(this);

      if (this.currentSectionType in endSectionTags) {
        this.startNewLine();
      }

      this.endSection({
        addNewLine: false
      });
    }
  }, {
    key: "startSection",
    value: function startSection(sectionType) {
      if (this.currentSectionType) {
        this.endSection();
      }

      this.currentSectionType = sectionType;
      this.song.setCurrentLineType(sectionType);

      if (sectionType in startSectionTags) {
        this.song.addTag(new _tag["default"](startSectionTags[sectionType]));
      }
    }
  }, {
    key: "endSection",
    value: function endSection() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$addNewLine = _ref.addNewLine,
          addNewLine = _ref$addNewLine === void 0 ? true : _ref$addNewLine;

      if (this.currentSectionType in endSectionTags) {
        this.song.addTag(new _tag["default"](endSectionTags[this.currentSectionType]));

        if (addNewLine) {
          this.startNewLine();
        }
      }

      this.song.setCurrentLineType(_constants.NONE);
      this.currentSectionType = null;
    }
  }, {
    key: "startNewLine",
    value: function startNewLine() {
      this.songLine = this.song.addLine();
    }
  }]);

  return UltimateGuitarParser;
}(_chord_sheet_parser["default"]);

var _default = UltimateGuitarParser;
exports["default"] = _default;