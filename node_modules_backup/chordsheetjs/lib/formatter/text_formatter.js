"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _chord_lyrics_pair = _interopRequireDefault(require("../chord_sheet/chord_lyrics_pair"));

var _tag = _interopRequireDefault(require("../chord_sheet/tag"));

var _utilities = require("../utilities");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Formats a song into a plain text chord sheet
 */
var TextFormatter = /*#__PURE__*/function () {
  function TextFormatter() {
    _classCallCheck(this, TextFormatter);
  }

  _createClass(TextFormatter, [{
    key: "format",
    value:
    /**
     * Formats a song into a plain text chord sheet
     * @param {Song} song The song to be formatted
     * @returns {string} the chord sheet
     */
    function format(song) {
      return [this.formatHeader(song), this.formatParagraphs(song)].join('');
    }
  }, {
    key: "formatHeader",
    value: function formatHeader(song) {
      var title = song.title,
          subtitle = song.subtitle;
      var separator = title || subtitle ? '\n' : '';
      return [this.formatTitle(title), this.formatSubTitle(subtitle), separator].join('');
    }
  }, {
    key: "formatParagraphs",
    value: function formatParagraphs(song) {
      var _this = this;

      var bodyParagraphs = song.bodyParagraphs,
          metadata = song.metadata;
      return bodyParagraphs.map(function (paragraph) {
        return _this.formatParagraph(paragraph, metadata);
      }).join('\n\n');
    }
  }, {
    key: "formatParagraph",
    value: function formatParagraph(paragraph, metadata) {
      var _this2 = this;

      return paragraph.lines.filter(function (line) {
        return line.hasRenderableItems();
      }).map(function (line) {
        return _this2.formatLine(line, metadata);
      }).join('\n');
    }
  }, {
    key: "formatLine",
    value: function formatLine(line, metadata) {
      var parts = [this.formatLineTop(line), this.formatLineBottom(line, metadata)];
      return parts.filter(function (i) {
        return i !== null;
      }).map(function (part) {
        return part.trimRight();
      }).join('\n');
    }
  }, {
    key: "formatTitle",
    value: function formatTitle(title) {
      if (title) {
        return "".concat(title.toUpperCase(), "\n");
      }

      return '';
    }
  }, {
    key: "formatSubTitle",
    value: function formatSubTitle(subtitle) {
      if (subtitle) {
        return "".concat(subtitle, "\n");
      }

      return '';
    }
  }, {
    key: "formatLineTop",
    value: function formatLineTop(line) {
      if ((0, _utilities.hasChordContents)(line)) {
        return this.formatLineWithFormatter(line, this.formatItemTop);
      }

      return null;
    }
  }, {
    key: "chordLyricsPairLength",
    value: function chordLyricsPairLength(chordLyricsPair) {
      var chords = chordLyricsPair.chords,
          lyrics = chordLyricsPair.lyrics;
      var chordsLength = (chords || '').length;
      var lyricsLength = (lyrics || '').length;

      if (chordsLength >= lyricsLength) {
        return chordsLength + 1;
      }

      return Math.max(chordsLength, lyricsLength);
    }
  }, {
    key: "formatItemTop",
    value: function formatItemTop(item) {
      if (item instanceof _tag["default"] && item.isRenderable()) {
        return (0, _utilities.padLeft)('', item.value);
      }

      if (item instanceof _chord_lyrics_pair["default"]) {
        return (0, _utilities.padLeft)(item.chords || '', this.chordLyricsPairLength(item));
      }

      return '';
    }
  }, {
    key: "formatLineBottom",
    value: function formatLineBottom(line, metadata) {
      if ((0, _utilities.hasTextContents)(line)) {
        return this.formatLineWithFormatter(line, this.formatItemBottom, metadata);
      }

      return null;
    }
  }, {
    key: "formatLineWithFormatter",
    value: function formatLineWithFormatter(line, formatter, metadata) {
      var _this3 = this;

      return line.items.map(function (item) {
        return formatter.call(_this3, item, metadata);
      }).join('');
    }
  }, {
    key: "formatItemBottom",
    value: function formatItemBottom(item, metadata) {
      if (item instanceof _tag["default"] && item.isRenderable()) {
        return item.value;
      }

      if (item instanceof _chord_lyrics_pair["default"]) {
        return (0, _utilities.padLeft)(item.lyrics, this.chordLyricsPairLength(item));
      }

      if (typeof item.evaluate === 'function') {
        return item.evaluate(metadata);
      }

      return '';
    }
  }]);

  return TextFormatter;
}();

var _default = TextFormatter;
exports["default"] = _default;