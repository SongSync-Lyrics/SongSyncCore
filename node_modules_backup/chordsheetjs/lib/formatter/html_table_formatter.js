"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultCss = exports["default"] = void 0;
exports.scopedCss = scopedCss;

var _handlebars = _interopRequireDefault(require("handlebars"));

require("../handlebars_helpers");

var _html_formatter = _interopRequireDefault(require("./html_formatter"));

require("./templates/html_table_formatter");

var _utilities = require("../utilities");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var template = _handlebars["default"].templates.html_table_formatter;
/**
 * Basic CSS, in object style à la useStyles, to use with output generated by {@link }HtmlTableFormatter}
 * For a CSS string see {@link scopedCss}
 * @type {Object.<string, Object.<string, string>>}
 */

var defaultCss = {
  h1: {
    fontSize: '1.5em'
  },
  h2: {
    fontSize: '1.1em'
  },
  table: {
    borderSpacing: '0',
    color: 'inherit'
  },
  td: {
    padding: '3px 0'
  },
  '.chord:not(:last-child)': {
    paddingRight: '10px'
  },
  '.paragraph': {
    marginBottom: '1em'
  }
};
/**
 * Generates basic CSS, scoped within the provided selector, to use with output generated by {@link HtmlTableFormatter}
 * @param scope the CSS scope to use, for example `.chordSheetViewer`
 * @returns {string} the CSS string
 */

exports.defaultCss = defaultCss;

function scopedCss(scope) {
  return (0, _utilities.scopeCss)(defaultCss, scope);
}
/**
 * Formats a song into HTML. It uses TABLEs to align lyrics with chords, which makes the HTML for things like
 * PDF conversion.
 */


var HtmlTableFormatter = /*#__PURE__*/function (_HtmlFormatter) {
  _inherits(HtmlTableFormatter, _HtmlFormatter);

  var _super = _createSuper(HtmlTableFormatter);

  function HtmlTableFormatter() {
    _classCallCheck(this, HtmlTableFormatter);

    return _super.apply(this, arguments);
  }

  _createClass(HtmlTableFormatter, [{
    key: "format",
    value:
    /**
     * Formats a song into HTML.
     * @param {Song} song The song to be formatted
     * @returns {string} The HTML string
     */
    function format(song) {
      return this.formatWithTemplate(song, template);
    }
    /**
     * Generates basic CSS, optionally scoped within the provided selector, to use with output generated by
     * {@link HtmlTableFormatter}
     *
     * For example, execute cssString('.chordSheetViewer') will result in CSS like:
     *
     *     .chordSheetViewer .paragraph {
     *       margin-bottom: 1em;
     *     }
     *
     * @param scope the CSS scope to use, for example `.chordSheetViewer`
     * @returns {string} the CSS string
     */

  }], [{
    key: "cssString",
    value: function cssString() {
      var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      return (0, _utilities.scopeCss)(defaultCss, scope);
    }
    /**
     * Basic CSS, in object style à la useStyles, to use with output generated by {@link HtmlTableFormatter}
     * For a CSS string see {@link cssString}
     *
     * Example:
     *
     *     '.paragraph': {
     *       marginBottom: '1em'
     *     }
     *
     * @return {Object.<string, Object.<string, string>>} the CSS object
     */

  }, {
    key: "cssObject",
    value: function cssObject() {
      return defaultCss;
    }
  }]);

  return HtmlTableFormatter;
}(_html_formatter["default"]);

var _default = HtmlTableFormatter;
exports["default"] = _default;