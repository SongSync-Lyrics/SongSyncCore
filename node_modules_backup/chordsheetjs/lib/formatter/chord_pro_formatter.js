"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _tag = _interopRequireDefault(require("../chord_sheet/tag"));

var _chord_lyrics_pair = _interopRequireDefault(require("../chord_sheet/chord_lyrics_pair"));

var _ternary = _interopRequireDefault(require("../chord_sheet/chord_pro/ternary"));

var _literal = _interopRequireDefault(require("../chord_sheet/chord_pro/literal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NEW_LINE = '\n';
/**
 * Formats a song into a ChordPro chord sheet
 */

var ChordProFormatter = /*#__PURE__*/function () {
  /**
   * Instantiate
   * @param {Object} options options
   * @param {boolean} options.evaluate Whether or not to evaluate meta expressions. For more info about meta
   * expression, see: https://bit.ly/2SC9c2u
   */
  function ChordProFormatter() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$evaluate = _ref.evaluate,
        evaluate = _ref$evaluate === void 0 ? false : _ref$evaluate;

    _classCallCheck(this, ChordProFormatter);

    this.evaluate = evaluate === true;
  }
  /**
   * Formats a song into a ChordPro chord sheet.
   * @param {Song} song The song to be formatted
   * @returns {string} The ChordPro string
   */


  _createClass(ChordProFormatter, [{
    key: "format",
    value: function format(song) {
      var _this = this;

      var lines = song.lines,
          metadata = song.metadata;
      return lines.map(function (line) {
        return _this.formatLine(line, metadata);
      }).join(NEW_LINE);
    }
  }, {
    key: "formatLine",
    value: function formatLine(line, metadata) {
      var _this2 = this;

      return line.items.map(function (item) {
        return _this2.formatItem(item, metadata);
      }).join('');
    }
  }, {
    key: "formatItem",
    value: function formatItem(item, metadata) {
      if (item instanceof _tag["default"]) {
        return this.formatTag(item);
      }

      if (item instanceof _chord_lyrics_pair["default"]) {
        return this.formatChordLyricsPair(item);
      }

      if (typeof item.evaluate === 'function') {
        return this.formatOrEvaluateItem(item, metadata);
      }

      throw new Error("Don't know how to format a ".concat(item.constructor.name));
    }
  }, {
    key: "formatOrEvaluateItem",
    value: function formatOrEvaluateItem(item, metadata) {
      if (this.evaluate) {
        return item.evaluate(metadata);
      }

      if (item instanceof _ternary["default"]) {
        return this.formatTernary(item);
      }

      if (item instanceof _literal["default"]) {
        return item.evaluate();
      }

      throw new Error("Don't know how to format a ".concat(item.constructor.name));
    }
  }, {
    key: "formatTernary",
    value: function formatTernary(ternary) {
      var variable = ternary.variable,
          valueTest = ternary.valueTest,
          trueExpression = ternary.trueExpression,
          falseExpression = ternary.falseExpression;
      return ['%{', variable || '', this.formatValueTest(valueTest), this.formatExpressionRange(trueExpression), this.formatExpressionRange(falseExpression), '}'].join('');
    }
  }, {
    key: "formatValueTest",
    value: function formatValueTest(valueTest) {
      if (!valueTest) {
        return '';
      }

      return "=".concat(valueTest);
    }
  }, {
    key: "formatExpressionRange",
    value: function formatExpressionRange(expressionRange) {
      var _this3 = this;

      if (!expressionRange) {
        return '';
      }

      return "|".concat(expressionRange.map(function (expression) {
        return _this3.formatExpression(expression);
      }).join(''));
    }
  }, {
    key: "formatExpression",
    value: function formatExpression(expression) {
      if (expression instanceof _ternary["default"]) {
        return this.formatTernary(expression);
      }

      if (expression instanceof _literal["default"]) {
        return expression.string;
      }

      return '';
    }
  }, {
    key: "formatTag",
    value: function formatTag(tag) {
      if (tag.hasValue()) {
        return "{".concat(tag.originalName, ": ").concat(tag.value, "}");
      }

      return "{".concat(tag.originalName, "}");
    }
  }, {
    key: "formatChordLyricsPair",
    value: function formatChordLyricsPair(chordLyricsPair) {
      return [this.formatChordLyricsPairChords(chordLyricsPair), this.formatChordLyricsPairLyrics(chordLyricsPair)].join('');
    }
  }, {
    key: "formatChordLyricsPairChords",
    value: function formatChordLyricsPairChords(chordLyricsPair) {
      if (chordLyricsPair.chords) {
        return "[".concat(chordLyricsPair.chords, "]");
      }

      return '';
    }
  }, {
    key: "formatChordLyricsPairLyrics",
    value: function formatChordLyricsPairLyrics(chordLyricsPair) {
      return chordLyricsPair.lyrics || '';
    }
  }]);

  return ChordProFormatter;
}();

var _default = ChordProFormatter;
exports["default"] = _default;