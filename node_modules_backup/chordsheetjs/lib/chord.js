"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Base class for {@link ChordSymbol} and {@link NumericChord}
 */
var Chord = /*#__PURE__*/function () {
  function Chord(_ref) {
    var base = _ref.base,
        modifier = _ref.modifier,
        suffix = _ref.suffix,
        bassBase = _ref.bassBase,
        bassModifier = _ref.bassModifier;

    _classCallCheck(this, Chord);

    this.base = base || null;
    this.modifier = modifier || null;
    this.suffix = suffix || null;
    this.bassBase = bassBase || null;
    this.bassModifier = bassModifier || null;
  }
  /**
   * Returns a deep copy of the chord
   * @returns {Chord}
   */


  _createClass(Chord, [{
    key: "clone",
    value: function clone() {
      var base = this.base,
          modifier = this.modifier,
          suffix = this.suffix,
          bassBase = this.bassBase,
          bassModifier = this.bassModifier;
      return new this.constructor({
        base: base,
        modifier: modifier,
        suffix: suffix,
        bassBase: bassBase,
        bassModifier: bassModifier
      });
    }
  }, {
    key: "set",
    value: function set(properties) {
      return new this.constructor(_objectSpread({
        base: this.base,
        modifier: this.modifier,
        suffix: this.suffix,
        bassBase: this.bassBase,
        bassModifier: this.bassModifier
      }, properties));
    }
  }]);

  return Chord;
}();

var _default = Chord;
exports["default"] = _default;