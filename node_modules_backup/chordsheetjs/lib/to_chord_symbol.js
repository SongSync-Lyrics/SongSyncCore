"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _parse_chord = _interopRequireDefault(require("./parse_chord"));

var _chord_symbol = _interopRequireDefault(require("./chord_symbol"));

var _chord_helpers = require("./chord_helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var TRANSPOSE_DISTANCE = [null, 0, 2, 4, 5, 7, 9, 11];
var MAJOR_SCALE = [null, 'M', 'm', 'm', 'M', 'M', 'm', 'dim'];
var MODIFIER_TRANSPOSITION = {
  '#': 1,
  b: -1
};

function transposeDistance(chordNumber, modifier) {
  return TRANSPOSE_DISTANCE[chordNumber] + (MODIFIER_TRANSPOSITION[modifier] || 0);
}

function normalizeSuffix(suffix) {
  if (suffix === 'M') {
    return '';
  }

  return suffix;
}

function chordSuffix(_ref) {
  var base = _ref.base,
      suffix = _ref.suffix;

  if ((0, _chord_helpers.isEmptyString)(suffix)) {
    var defaultSuffix = MAJOR_SCALE[base];
    return normalizeSuffix(defaultSuffix);
  }

  return normalizeSuffix(suffix);
}

function chordModifier(keyChord, numericChord) {
  if (keyChord.modifier === 'b' || numericChord.modifier === 'b') {
    return 'b';
  }

  return '#';
}
/**
 * Converts a numeric chord into a chord symbol, using the provided key
 * @param {NumericChord} numericChord
 * @param {string} key the to use, sp anything between Ab and G#
 * @returns {ChordSymbol} the resulting chord symbol
 */


function toChordSymbol(numericChord, key) {
  var _bassChord, _bassChord2;

  var keyChord = (0, _parse_chord["default"])(key);

  if (keyChord.suffix === 'm') {
    keyChord = keyChord.transpose(3).set({
      suffix: null
    });
  }

  var modifier = chordModifier(keyChord, numericChord);
  var baseTransposeDistance = transposeDistance(numericChord.base, numericChord.modifier);
  var baseChord = keyChord.transpose(baseTransposeDistance).useModifier(modifier);
  var bassChord = null;

  if (numericChord.bassBase) {
    bassChord = keyChord.transpose(transposeDistance(numericChord.bassBase, numericChord.bassModifier));
  }

  var suffix = chordSuffix(numericChord);
  return new _chord_symbol["default"]({
    base: baseChord.base,
    modifier: baseChord.modifier,
    suffix: suffix,
    bassBase: (_bassChord = bassChord) === null || _bassChord === void 0 ? void 0 : _bassChord.base,
    bassModifier: (_bassChord2 = bassChord) === null || _bassChord2 === void 0 ? void 0 : _bassChord2.modifier
  });
}

var _default = toChordSymbol;
exports["default"] = _default;