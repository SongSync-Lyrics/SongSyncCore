"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _line = _interopRequireDefault(require("./line"));

var _tag = _interopRequireWildcard(require("./tag"));

var _paragraph = _interopRequireDefault(require("./paragraph"));

var _utilities = require("../utilities");

var _metadata = _interopRequireDefault(require("./metadata"));

var _constants = require("../constants");

var _parser_warning = _interopRequireDefault(require("../parser/parser_warning"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Represents a song in a chord sheet. Currently a chord sheet can only have one song.
 */
var Song = /*#__PURE__*/function () {
  /**
   * Creates a new {Song} instance
   * @param metadata {Object|Metadata} predefined metadata
   */
  function Song() {
    var metadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Song);

    /**
     * The {@link Line} items of which the song consists
     * @member
     * @type {Array<Line>}
     */
    this.lines = [];
    /**
     * The {@link Paragraph} items of which the song consists
     * @member
     * @type {Paragraph[]}
     */

    this.paragraphs = [];
    /**
     * The song's metadata. When there is only one value for an entry, the value is a string. Else, the value is
     * an array containing all unique values for the entry.
     * @type {Metadata}
     */

    this.metadata = new _metadata["default"](metadata);
    this.currentLine = null;
    this.currentParagraph = null;
    this.warnings = [];
    this.sectionType = _constants.NONE;
  }

  _createClass(Song, [{
    key: "previousLine",
    get: function get() {
      var count = this.lines.length;

      if (count >= 2) {
        return this.lines[count - 2];
      }

      return null;
    }
    /**
     * Returns the song lines, skipping the leading empty lines (empty as in not rendering any content). This is useful
     * if you want to skip the "header lines": the lines that only contain meta data.
     * @returns {Line[]} The song body lines
     */

  }, {
    key: "bodyLines",
    get: function get() {
      return this.selectRenderableItems('_bodyLines', 'lines');
    }
    /**
     * Returns the song paragraphs, skipping the paragraphs that only contain empty lines
     * (empty as in not rendering any content)
     * @see {@link bodyLines}
     * @returns {Paragraph[]}
     */

  }, {
    key: "bodyParagraphs",
    get: function get() {
      return this.selectRenderableItems('_bodyParagraphs', 'paragraphs');
    }
  }, {
    key: "selectRenderableItems",
    value: function selectRenderableItems(targetProp, sourceProp) {
      if (this[targetProp] === undefined) {
        this[targetProp] = _toConsumableArray(this[sourceProp]);
        var collection = this[targetProp];

        while (collection.length > 0 && !collection[0].hasRenderableItems()) {
          this[targetProp].shift();
        }
      }

      return this[targetProp];
    }
  }, {
    key: "chords",
    value: function chords(chr) {
      this.currentLine.chords(chr);
    }
  }, {
    key: "lyrics",
    value: function lyrics(chr) {
      this.ensureLine();
      this.currentLine.lyrics(chr);
    }
  }, {
    key: "addLine",
    value: function addLine() {
      this.ensureParagraph();
      this.flushLine();
      this.currentLine = (0, _utilities.pushNew)(this.lines, _line["default"]);
      this.setCurrentLineType(this.sectionType);
      return this.currentLine;
    }
  }, {
    key: "setCurrentLineType",
    value: function setCurrentLineType(sectionType) {
      this.currentLine.type = sectionType;
    }
  }, {
    key: "flushLine",
    value: function flushLine() {
      if (this.currentLine !== null) {
        if (this.currentLine.isEmpty()) {
          this.addParagraph();
        } else if (this.currentLine.hasRenderableItems()) {
          this.currentParagraph.addLine(this.currentLine);
        }
      }
    }
  }, {
    key: "finish",
    value: function finish() {
      this.flushLine();
    }
  }, {
    key: "addChordLyricsPair",
    value: function addChordLyricsPair() {
      var chords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var lyrics = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      this.ensureLine();
      return this.currentLine.addChordLyricsPair(chords, lyrics);
    }
  }, {
    key: "ensureLine",
    value: function ensureLine() {
      if (this.currentLine === null) {
        this.addLine();
      }
    }
  }, {
    key: "addParagraph",
    value: function addParagraph() {
      this.currentParagraph = (0, _utilities.pushNew)(this.paragraphs, _paragraph["default"]);
      return this.currentParagraph;
    }
  }, {
    key: "ensureParagraph",
    value: function ensureParagraph() {
      if (this.currentParagraph === null) {
        this.addParagraph();
      }
    }
  }, {
    key: "addTag",
    value: function addTag(tagContents) {
      var tag = _tag["default"].parse(tagContents);

      if (tag.isMetaTag()) {
        this.setMetaData(tag.name, tag.value);
      } else {
        this.setSectionTypeFromTag(tag);
      }

      this.ensureLine();
      this.currentLine.addTag(tag);
      return tag;
    }
  }, {
    key: "setSectionTypeFromTag",
    value: function setSectionTypeFromTag(tag) {
      switch (tag.name) {
        case _tag.START_OF_CHORUS:
          this.startSection(_constants.CHORUS, tag);
          break;

        case _tag.END_OF_CHORUS:
          this.endSection(_constants.CHORUS, tag);
          break;

        case _tag.START_OF_TAB:
          this.startSection(_constants.TAB, tag);
          break;

        case _tag.END_OF_TAB:
          this.endSection(_constants.TAB, tag);
          break;

        case _tag.START_OF_VERSE:
          this.startSection(_constants.VERSE, tag);
          break;

        case _tag.END_OF_VERSE:
          this.endSection(_constants.VERSE, tag);
          break;

        default:
          break;
      }
    }
  }, {
    key: "startSection",
    value: function startSection(sectionType, tag) {
      this.checkCurrentSectionType(_constants.NONE, tag);
      this.sectionType = sectionType;
      this.setCurrentLineType(sectionType);
    }
  }, {
    key: "endSection",
    value: function endSection(sectionType, tag) {
      this.checkCurrentSectionType(sectionType, tag);
      this.sectionType = _constants.NONE;
    }
  }, {
    key: "checkCurrentSectionType",
    value: function checkCurrentSectionType(sectionType, tag) {
      if (this.sectionType !== sectionType) {
        this.addWarning("Unexpected tag {".concat(tag.originalName, ", current section is: ").concat(this.sectionType), tag);
      }
    }
  }, {
    key: "addWarning",
    value: function addWarning(message, _ref) {
      var line = _ref.line,
          column = _ref.column;
      var warning = new _parser_warning["default"](message, line, column);
      this.warnings.push(warning);
    }
  }, {
    key: "addComment",
    value: function addComment(comment) {
      this.ensureLine();
      this.currentLine.addComment(comment);
    }
  }, {
    key: "addItem",
    value: function addItem(item) {
      if (item instanceof _tag["default"]) {
        this.addTag(item);
      } else {
        this.ensureLine();
        this.currentLine.addItem(item);
      }
    }
    /**
     * Returns a deep clone of the song
     * @returns {Song} The cloned song
     */

  }, {
    key: "clone",
    value: function clone() {
      var clonedSong = new Song();
      clonedSong.lines = this.lines.map(function (line) {
        return line.clone();
      });
      clonedSong.metadata = this.metadata.clone();
      return clonedSong;
    }
  }, {
    key: "setMetaData",
    value: function setMetaData(name, value) {
      this.metadata.add(name, value);
    }
    /**
     * The song's metadata. Please use {@link metadata} instead.
     * @deprecated
     * @returns {@link Metadata} The metadata
     */

  }, {
    key: "metaData",
    get: function get() {
      (0, _utilities.deprecate)('metaData has been deprecated, please use metadata instead (notice the lowercase "d")');
      return this.metadata;
    }
  }, {
    key: "getMetaData",
    value: function getMetaData(name) {
      return this.metadata[name] || null;
    }
  }]);

  return Song;
}();

var defineProperty = Object.defineProperty;
var songPrototype = Song.prototype;

_tag.META_TAGS.forEach(function (tagName) {
  defineProperty(songPrototype, tagName, {
    get: function get() {
      return this.getMetaData(tagName);
    }
  });
});

var _default = Song;
exports["default"] = _default;