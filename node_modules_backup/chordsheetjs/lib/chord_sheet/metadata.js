"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _parse_chord = _interopRequireDefault(require("../parse_chord"));

var _tag = require("./tag");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function appendValue(array, key, value) {
  if (!array.includes(value)) {
    array.push(value);
  }
}
/**
 * Stores song metadata. Properties can be accessed using the get() method:
 *
 * const metadata = new Metadata({ author: 'John' });
 * metadata.get('author')   // => 'John'
 *
 * See {@link Metadata#get}
 */


var Metadata = /*#__PURE__*/function () {
  function Metadata() {
    var _this = this;

    var metadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Metadata);

    Object.keys(metadata).filter(function (key) {
      return !(0, _tag.isReadonlyTag)(key);
    }).forEach(function (key) {
      var value = metadata[key];

      if (value instanceof Array) {
        _this[key] = _toConsumableArray(value);
      } else {
        _this[key] = value;
      }
    });
  }

  _createClass(Metadata, [{
    key: "add",
    value: function add(key, value) {
      if ((0, _tag.isReadonlyTag)(key)) {
        return;
      }

      if (!(key in this)) {
        this[key] = value;
        return;
      }

      var currentValue = this[key];

      if (currentValue === value) {
        return;
      }

      if (currentValue instanceof Array) {
        appendValue(currentValue, key, value);
        return;
      }

      this[key] = [currentValue, value];
    }
    /**
     * Reads a metadata value by key. This method supports simple value lookup, as fetching single array values.
     *
     * This method deprecates direct property access, eg: metadata['author']
     *
     * Examples:
     *
     * const metadata = new Metadata({ lyricist: 'Pete', author: ['John', 'Mary'] });
     * metadata.get('lyricist') // => 'Pete'
     * metadata.get('author')   // => ['John', 'Mary']
     * metadata.get('author.1') // => 'John'
     * metadata.get('author.2') // => 'Mary'
     *
     * Using a negative index will start counting at the end of the list:
     *
     * const metadata = new Metadata({ lyricist: 'Pete', author: ['John', 'Mary'] });
     * metadata.get('author.-1') // => 'Mary'
     * metadata.get('author.-2') // => 'John'
     *
     * @param prop the property name
     * @returns {Array<String>|String} the metadata value(s). If there is only one value, it will return a String,
     * else it returns an array of strings.
     */

  }, {
    key: "get",
    value: function get(prop) {
      if (prop === _tag._KEY) {
        return this.calculateKeyFromCapo();
      }

      if (prop in this) {
        return this[prop];
      }

      return this.getArrayItem(prop);
    }
  }, {
    key: "parseArrayKey",
    value: function parseArrayKey(prop) {
      var match = prop.match(/(.+)\.(-?\d+)$/);

      if (!match) {
        return [];
      }

      var key = match[1];
      var index = parseInt(match[2], 10);
      return [key, index];
    }
  }, {
    key: "getArrayItem",
    value: function getArrayItem(prop) {
      var _this$parseArrayKey = this.parseArrayKey(prop),
          _this$parseArrayKey2 = _slicedToArray(_this$parseArrayKey, 2),
          key = _this$parseArrayKey2[0],
          index = _this$parseArrayKey2[1];

      if (!(key && index)) {
        return undefined;
      }

      var arrayValue = this[key] || [];
      var itemIndex = index;

      if (itemIndex < 0) {
        itemIndex = arrayValue.length + itemIndex;
      } else if (itemIndex > 0) {
        itemIndex -= 1;
      }

      return arrayValue[itemIndex];
    }
    /**
     * Returns a deep clone of this Metadata object
     * @returns {Metadata} the cloned Metadata object
     */

  }, {
    key: "clone",
    value: function clone() {
      return new Metadata(this);
    }
  }, {
    key: "calculateKeyFromCapo",
    value: function calculateKeyFromCapo() {
      var capo = this.get(_tag.CAPO);
      var key = this.get(_tag.KEY);

      if (capo && key) {
        return (0, _parse_chord["default"])(key).transpose(parseInt(capo, 10)).toString();
      }

      return undefined;
    }
  }]);

  return Metadata;
}();

var _default = Metadata;
exports["default"] = _default;