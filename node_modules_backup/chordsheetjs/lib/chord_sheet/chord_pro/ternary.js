"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _evaluation_error = _interopRequireDefault(require("./evaluation_error"));

var _utilities = require("../../utilities");

var _composite = _interopRequireDefault(require("./composite"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Ternary = /*#__PURE__*/function () {
  function Ternary() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$variable = _ref.variable,
        variable = _ref$variable === void 0 ? null : _ref$variable,
        _ref$valueTest = _ref.valueTest,
        valueTest = _ref$valueTest === void 0 ? null : _ref$valueTest,
        _ref$trueExpression = _ref.trueExpression,
        trueExpression = _ref$trueExpression === void 0 ? null : _ref$trueExpression,
        _ref$falseExpression = _ref.falseExpression,
        falseExpression = _ref$falseExpression === void 0 ? null : _ref$falseExpression,
        _ref$line = _ref.line,
        line = _ref$line === void 0 ? null : _ref$line,
        _ref$column = _ref.column,
        column = _ref$column === void 0 ? null : _ref$column,
        _ref$offset = _ref.offset,
        offset = _ref$offset === void 0 ? null : _ref$offset;

    _classCallCheck(this, Ternary);

    this.variable = (0, _utilities.presence)(variable);
    this.valueTest = valueTest;
    this.trueExpression = trueExpression;
    this.falseExpression = falseExpression;
    this.line = line;
    this.column = column;
    this.offset = offset;
  }
  /**
   * Evaluate the meta expression
   * @param {Metadata} metadata The metadata object to use for evaluating the expression
   * @returns {string} The evaluated expression
   */


  _createClass(Ternary, [{
    key: "evaluate",
    value: function evaluate(metadata) {
      var upperContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (this.variable) {
        return this.evaluateWithVariable(metadata);
      }

      if (!upperContext) {
        throw new _evaluation_error["default"]('Unexpected empty expression', this.line, this.column, this.offset);
      }

      return metadata.get(upperContext);
    }
  }, {
    key: "evaluateWithVariable",
    value: function evaluateWithVariable(metadata) {
      var value = metadata.get(this.variable);

      if ((0, _utilities.isPresent)(value) && (!this.valueTest || value === this.valueTest)) {
        return this.evaluateForTruthyValue(metadata, value);
      }

      if (this.falseExpression) {
        return new _composite["default"](this.falseExpression, this.variable).evaluate(metadata);
      }

      return '';
    }
  }, {
    key: "evaluateForTruthyValue",
    value: function evaluateForTruthyValue(metadata, value) {
      if (this.trueExpression) {
        return new _composite["default"](this.trueExpression, this.variable).evaluate(metadata);
      }

      return value;
    }
  }, {
    key: "isRenderable",
    value: function isRenderable() {
      return true;
    }
  }, {
    key: "clone",
    value: function clone() {
      var _this$trueExpression, _this$falseExpression;

      return new Ternary({
        variable: this.variable,
        valueTest: this.valueTest,
        trueExpression: (_this$trueExpression = this.trueExpression) === null || _this$trueExpression === void 0 ? void 0 : _this$trueExpression.map(function (part) {
          return part.clone();
        }),
        falseExpression: (_this$falseExpression = this.falseExpression) === null || _this$falseExpression === void 0 ? void 0 : _this$falseExpression.map(function (part) {
          return part.clone();
        }),
        line: this.line,
        column: this.column,
        offset: this.offset
      });
    }
  }]);

  return Ternary;
}();

var _default = Ternary;
exports["default"] = _default;