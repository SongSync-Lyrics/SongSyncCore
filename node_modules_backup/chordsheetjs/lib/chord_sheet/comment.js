"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Represents a comment. See https://www.chordpro.org/chordpro/chordpro-file-format-specification/#overview
 */
var Comment = /*#__PURE__*/function () {
  function Comment(content) {
    _classCallCheck(this, Comment);

    this.content = content;
  }
  /**
   * Indicates whether a Comment should be visible in a formatted chord sheet (except for ChordPro sheets)
   * @returns {boolean}
   */


  _createClass(Comment, [{
    key: "isRenderable",
    value: function isRenderable() {
      return false;
    }
    /**
     * Returns a deep copy of the Comment, useful when programmatically transforming a song
     * @returns {Comment}
     */

  }, {
    key: "clone",
    value: function clone() {
      return new Comment(this.content);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "Comment(content=".concat(this.content, ")");
    }
  }]);

  return Comment;
}();

var _default = Comment;
exports["default"] = _default;