"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Represents a chord with the corresponding (partial) lyrics
 */
var ChordLyricsPair = /*#__PURE__*/function () {
  /**
   * Initialises a ChordLyricsPair
   * @param {string} chords The chords
   * @param {string} lyrics The lyrics
   */
  function ChordLyricsPair() {
    var chords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var lyrics = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    _classCallCheck(this, ChordLyricsPair);

    /**
     * The chords
     * @member
     * @type {string}
     */
    this.chords = chords || '';
    /**
     * The lyrics
     * @member
     * @type {string}
     */

    this.lyrics = lyrics || '';
  }
  /**
   * Indicates whether a ChordLyricsPair should be visible in a formatted chord sheet (except for ChordPro sheets)
   * @returns {boolean}
   */


  _createClass(ChordLyricsPair, [{
    key: "isRenderable",
    value: function isRenderable() {
      return true;
    }
    /**
     * Returns a deep copy of the ChordLyricsPair, useful when programmatically transforming a song
     * @returns {ChordLyricsPair}
     */

  }, {
    key: "clone",
    value: function clone() {
      return new ChordLyricsPair(this.chords, this.lyrics);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "ChordLyricsPair(chords=".concat(this.chords, ", lyrics=").concat(this.lyrics, ")");
    }
  }]);

  return ChordLyricsPair;
}();

var _default = ChordLyricsPair;
exports["default"] = _default;