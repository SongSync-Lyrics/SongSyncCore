"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports._KEY = exports.YEAR = exports.TITLE = exports.TIME = exports.TEMPO = exports.SUBTITLE = exports.START_OF_VERSE = exports.START_OF_TAB = exports.START_OF_CHORUS = exports.READ_ONLY_TAGS = exports.META_TAGS = exports.LYRICIST = exports.KEY = exports.END_OF_VERSE = exports.END_OF_TAB = exports.END_OF_CHORUS = exports.DURATION = exports.COPYRIGHT = exports.COMPOSER = exports.COMMENT = exports.CAPO = exports.ARTIST = exports.ALBUM = void 0;
exports.isReadonlyTag = isReadonlyTag;

var _ALIASES;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Album meta directive. See https://www.chordpro.org/chordpro/directives-album/
 * @type {string}
 */
var ALBUM = 'album';
/**
 * Artist meta directive. See https://www.chordpro.org/chordpro/directives-artist/
 * @type {string}
 */

exports.ALBUM = ALBUM;
var ARTIST = 'artist';
/**
 * Capo meta directive. See https://www.chordpro.org/chordpro/directives-capo/
 * @type {string}
 */

exports.ARTIST = ARTIST;
var CAPO = 'capo';
/**
 * Comment directive. See https://www.chordpro.org/chordpro/directives-comment/
 * @type {string}
 */

exports.CAPO = CAPO;
var COMMENT = 'comment';
/**
 * Composer meta directive. See https://www.chordpro.org/chordpro/directives-composer/
 * @type {string}
 */

exports.COMMENT = COMMENT;
var COMPOSER = 'composer';
/**
 * Copyright meta directive. See https://www.chordpro.org/chordpro/directives-copyright/
 * @type {string}
 */

exports.COMPOSER = COMPOSER;
var COPYRIGHT = 'copyright';
/**
 * Duration meta directive. See https://www.chordpro.org/chordpro/directives-duration/
 * @type {string}
 */

exports.COPYRIGHT = COPYRIGHT;
var DURATION = 'duration';
/**
 * End of chorus directive. See https://www.chordpro.org/chordpro/directives-env_chorus/
 * @type {string}
 */

exports.DURATION = DURATION;
var END_OF_CHORUS = 'end_of_chorus';
/**
 * End of tab directive. See https://www.chordpro.org/chordpro/directives-env_tab/
 * @type {string}
 */

exports.END_OF_CHORUS = END_OF_CHORUS;
var END_OF_TAB = 'end_of_tab';
/**
 * End of verse directive. See https://www.chordpro.org/chordpro/directives-env_verse/
 * @type {string}
 */

exports.END_OF_TAB = END_OF_TAB;
var END_OF_VERSE = 'end_of_verse';
/**
 * Key meta directive. See https://www.chordpro.org/chordpro/directives-key/
 * @type {string}
 */

exports.END_OF_VERSE = END_OF_VERSE;
var KEY = 'key';
/**
 * Key meta directive. See https://www.chordpro.org/chordpro/directives-key/
 * @type {string}
 */

exports.KEY = KEY;
var _KEY = '_key';
/**
 * Lyricist meta directive. See https://www.chordpro.org/chordpro/directives-lyricist/
 * @type {string}
 */

exports._KEY = _KEY;
var LYRICIST = 'lyricist';
/**
 * Start of chorus directive. See https://www.chordpro.org/chordpro/directives-env_chorus/
 * @type {string}
 */

exports.LYRICIST = LYRICIST;
var START_OF_CHORUS = 'start_of_chorus';
/**
 * Start of tab directive. See https://www.chordpro.org/chordpro/directives-env_tab/
 * @type {string}
 */

exports.START_OF_CHORUS = START_OF_CHORUS;
var START_OF_TAB = 'start_of_tab';
/**
 * Start of verse directive. See https://www.chordpro.org/chordpro/directives-env_verse/
 * @type {string}
 */

exports.START_OF_TAB = START_OF_TAB;
var START_OF_VERSE = 'start_of_verse';
/**
 * Subtitle meta directive. See https://www.chordpro.org/chordpro/directives-subtitle/
 * @type {string}
 */

exports.START_OF_VERSE = START_OF_VERSE;
var SUBTITLE = 'subtitle';
/**
 * Tempo meta directive. See https://www.chordpro.org/chordpro/directives-tempo/
 * @type {string}
 */

exports.SUBTITLE = SUBTITLE;
var TEMPO = 'tempo';
/**
 * Time meta directive. See https://www.chordpro.org/chordpro/directives-time/
 * @type {string}
 */

exports.TEMPO = TEMPO;
var TIME = 'time';
/**
 * Title meta directive. See https://www.chordpro.org/chordpro/directives-title/
 * @type {string}
 */

exports.TIME = TIME;
var TITLE = 'title';
/**
 * Year meta directive. See https://www.chordpro.org/chordpro/directives-year/
 * @type {string}
 */

exports.TITLE = TITLE;
var YEAR = 'year';
exports.YEAR = YEAR;
var TITLE_SHORT = 't';
var SUBTITLE_SHORT = 'st';
var COMMENT_SHORT = 'c';
var START_OF_CHORUS_SHORT = 'soc';
var END_OF_CHORUS_SHORT = 'eoc';
var START_OF_TAB_SHORT = 'sot';
var END_OF_TAB_SHORT = 'eot';
var RENDERABLE_TAGS = [COMMENT];
var META_TAGS = [ALBUM, ARTIST, CAPO, COMPOSER, COPYRIGHT, DURATION, KEY, LYRICIST, TEMPO, TIME, TITLE, SUBTITLE, YEAR];
exports.META_TAGS = META_TAGS;
var READ_ONLY_TAGS = [_KEY];
exports.READ_ONLY_TAGS = READ_ONLY_TAGS;
var ALIASES = (_ALIASES = {}, _defineProperty(_ALIASES, TITLE_SHORT, TITLE), _defineProperty(_ALIASES, SUBTITLE_SHORT, SUBTITLE), _defineProperty(_ALIASES, COMMENT_SHORT, COMMENT), _defineProperty(_ALIASES, START_OF_CHORUS_SHORT, START_OF_CHORUS), _defineProperty(_ALIASES, END_OF_CHORUS_SHORT, END_OF_CHORUS), _defineProperty(_ALIASES, START_OF_TAB_SHORT, START_OF_TAB), _defineProperty(_ALIASES, END_OF_TAB_SHORT, END_OF_TAB), _ALIASES);
var META_TAG_REGEX = /^meta:\s*([^:\s]+)(\s*(.+))?$/;
var TAG_REGEX = /^([^:\s]+)(:?\s*(.+))?$/;
var CUSTOM_META_TAG_NAME_REGEX = /^x_(.+)$/;

function isReadonlyTag(tagName) {
  return READ_ONLY_TAGS.includes(tagName);
}

var translateTagNameAlias = function translateTagNameAlias(name) {
  if (!name) {
    return name;
  }

  var sanitizedName = name.trim();

  if (sanitizedName in ALIASES) {
    return ALIASES[sanitizedName];
  }

  return sanitizedName;
};
/**
 * Represents a tag/directive. See https://www.chordpro.org/chordpro/chordpro-directives/
 */


var Tag = /*#__PURE__*/function () {
  function Tag(name, value) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$line = _ref.line,
        line = _ref$line === void 0 ? null : _ref$line,
        _ref$column = _ref.column,
        column = _ref$column === void 0 ? null : _ref$column,
        _ref$offset = _ref.offset,
        offset = _ref$offset === void 0 ? null : _ref$offset;

    _classCallCheck(this, Tag);

    this.name = name;
    this.value = value;
    this.line = line;
    this.column = column;
    this.offset = offset;
  }

  _createClass(Tag, [{
    key: "name",
    get:
    /**
     * The tag full name. When the original tag used the short name, `name` will return the full name.
     * @member
     * @type {string}
     */
    function get() {
      return this._name.trim();
    }
    /**
     * The original tag name that was used to construct the tag.
     * @member
     * @type {string}
     */
    ,
    set: function set(name) {
      this._name = translateTagNameAlias(name);
      this._originalName = name;
    }
  }, {
    key: "originalName",
    get: function get() {
      return this._originalName.trim();
    }
  }, {
    key: "value",
    get:
    /**
     * The tag value
     * @member
     * @type {string|null}
     */
    function get() {
      if (this._value) {
        return this._value.trim();
      }

      return this._value || null;
    }
    /**
     * Checks whether the tag value is a non-empty string.
     * @returns {boolean}
     */
    ,
    set: function set(value) {
      this._value = value;
    }
  }, {
    key: "hasValue",
    value: function hasValue() {
      return this.value !== null && this.value.trim().length > 0;
    }
    /**
     * Checks whether the tag is usually rendered inline. It currently only applies to comment tags.
     * @returns {boolean}
     */

  }, {
    key: "isRenderable",
    value: function isRenderable() {
      return RENDERABLE_TAGS.indexOf(this.name) !== -1;
    }
    /**
     * Checks whether the tag is either a standard meta tag or a custom meta directive (`{x_some_name}`)
     * @returns {boolean}
     */

  }, {
    key: "isMetaTag",
    value: function isMetaTag() {
      return CUSTOM_META_TAG_NAME_REGEX.test(this.name) || META_TAGS.indexOf(this.name) !== -1;
    }
    /**
     * Returns a clone of the tag.
     * @returns {Tag} The cloned tag
     */

  }, {
    key: "clone",
    value: function clone() {
      return new Tag(this.name, this.value);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "Tag(name=".concat(this.name, ", value=").concat(this.name, ")");
    }
  }], [{
    key: "parse",
    value: function parse(tag) {
      if (tag instanceof Tag) {
        return tag;
      }

      return this.parseWithRegex(tag, META_TAG_REGEX) || this.parseWithRegex(tag, TAG_REGEX);
    }
  }, {
    key: "parseWithRegex",
    value: function parseWithRegex(tag, regex) {
      var matches = tag.match(regex);

      if (matches !== null) {
        return new Tag(matches[1], matches[3] || null);
      }

      return null;
    }
  }]);

  return Tag;
}();

var _default = Tag;
exports["default"] = _default;