"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _chord_helpers = require("./chord_helpers");

var _chord = _interopRequireDefault(require("./chord"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Represents a chord symbol, such as Esus4
 */
var ChordSymbol = /*#__PURE__*/function (_Chord) {
  _inherits(ChordSymbol, _Chord);

  var _super = _createSuper(ChordSymbol);

  function ChordSymbol() {
    _classCallCheck(this, ChordSymbol);

    return _super.apply(this, arguments);
  }

  _createClass(ChordSymbol, [{
    key: "normalize",
    value:
    /**
     * Normalizes the chord:
     * - Fb becomes E
     * - Cb becomes B
     * - B# becomes C
     * - E# becomes F
     * If the chord is already normalized, this will return a copy.
     * @returns {ChordSymbol} the normalized chord
     */
    function normalize() {
      return (0, _chord_helpers.processChord)(this, _chord_helpers.normalize);
    }
    /**
     * Switches between '#' and 'b' as modifiers. If
     * @returns {ChordSymbol} the changed chord
     */

  }, {
    key: "switchModifier",
    value: function switchModifier() {
      return (0, _chord_helpers.processChord)(this, _chord_helpers.switchModifier);
    }
    /**
     * Switches to the specified modifier
     * @param newModifier the modifier to use: `'#'` or `'b'`
     * @returns {ChordSymbol} the changed chord
     */

  }, {
    key: "useModifier",
    value: function useModifier(newModifier) {
      return (0, _chord_helpers.processChord)(this, _chord_helpers.useModifier, newModifier);
    }
    /**
     * Transposes the chord up by 1 semitone. Eg. A becomes A#, Eb becomes E
     * @returns {ChordSymbol} the transposed chord
     */

  }, {
    key: "transposeUp",
    value: function transposeUp() {
      return (0, _chord_helpers.processChord)(this, _chord_helpers.transposeUp);
    }
    /**
     * Transposes the chord down by 1 semitone. Eg. A# becomes A, E becomes Eb
     * @returns {ChordSymbol} the transposed chord
     */

  }, {
    key: "transposeDown",
    value: function transposeDown() {
      return (0, _chord_helpers.processChord)(this, _chord_helpers.transposeDown);
    }
    /**
     * Transposes the chord by the specified number of semitones
     * @param delta de number of semitones
     * @returns {ChordSymbol} the transposed chord
     */

  }, {
    key: "transpose",
    value: function transpose(delta) {
      return (0, _chord_helpers.processChord)(this, _chord_helpers.transpose, delta);
    }
    /**
     * Convert the chord to a string, eg. `'Esus4/G#'`
     * @returns {string|*}
     */

  }, {
    key: "toString",
    value: function toString() {
      var chordString = this.base + (this.modifier || '') + (this.suffix || '');

      if (this.bassBase) {
        return "".concat(chordString, "/").concat(this.bassBase).concat(this.bassModifier || '');
      }

      return chordString;
    }
  }]);

  return ChordSymbol;
}(_chord["default"]);

var _default = ChordSymbol;
exports["default"] = _default;